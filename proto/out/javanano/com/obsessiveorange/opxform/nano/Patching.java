// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.obsessiveorange.opxform.nano;

@SuppressWarnings("hiding")
public interface Patching {

  public static final class Patch extends
      com.google.protobuf.nano.MessageNano {

    private static volatile Patch[] _emptyArray;
    public static Patch[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Patch[0];
          }
        }
      }
      return _emptyArray;
    }

    // int64 baseVersion = 1;
    public long baseVersion;

    // int64 baseDocLength = 2;
    public long baseDocLength;

    // repeated .com.obsessiveorange.opxform.Diff diffs = 3;
    public com.obsessiveorange.opxform.nano.Patching.Diff[] diffs;

    public Patch() {
      clear();
    }

    public Patch clear() {
      baseVersion = 0L;
      baseDocLength = 0L;
      diffs = com.obsessiveorange.opxform.nano.Patching.Diff.emptyArray();
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.baseVersion != 0L) {
        output.writeInt64(1, this.baseVersion);
      }
      if (this.baseDocLength != 0L) {
        output.writeInt64(2, this.baseDocLength);
      }
      if (this.diffs != null && this.diffs.length > 0) {
        for (int i = 0; i < this.diffs.length; i++) {
          com.obsessiveorange.opxform.nano.Patching.Diff element = this.diffs[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.baseVersion != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.baseVersion);
      }
      if (this.baseDocLength != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(2, this.baseDocLength);
      }
      if (this.diffs != null && this.diffs.length > 0) {
        for (int i = 0; i < this.diffs.length; i++) {
          com.obsessiveorange.opxform.nano.Patching.Diff element = this.diffs[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      return size;
    }

    @Override
    public Patch mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.baseVersion = input.readInt64();
            break;
          }
          case 16: {
            this.baseDocLength = input.readInt64();
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.diffs == null ? 0 : this.diffs.length;
            com.obsessiveorange.opxform.nano.Patching.Diff[] newArray =
                new com.obsessiveorange.opxform.nano.Patching.Diff[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.diffs, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.obsessiveorange.opxform.nano.Patching.Diff();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.obsessiveorange.opxform.nano.Patching.Diff();
            input.readMessage(newArray[i]);
            this.diffs = newArray;
            break;
          }
        }
      }
    }

    public static Patch parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Patch(), data);
    }

    public static Patch parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Patch().mergeFrom(input);
    }
  }

  public static final class Diff extends
      com.google.protobuf.nano.MessageNano {

    private static volatile Diff[] _emptyArray;
    public static Diff[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Diff[0];
          }
        }
      }
      return _emptyArray;
    }

    // int64 index = 1;
    public long index;

    // bool isInsertion = 2;
    public boolean isInsertion;

    // int64 count = 3;
    public long count;

    // string modification = 4;
    public java.lang.String modification;

    public Diff() {
      clear();
    }

    public Diff clear() {
      index = 0L;
      isInsertion = false;
      count = 0L;
      modification = "";
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.index != 0L) {
        output.writeInt64(1, this.index);
      }
      if (this.isInsertion != false) {
        output.writeBool(2, this.isInsertion);
      }
      if (this.count != 0L) {
        output.writeInt64(3, this.count);
      }
      if (!this.modification.equals("")) {
        output.writeString(4, this.modification);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.index != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.index);
      }
      if (this.isInsertion != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(2, this.isInsertion);
      }
      if (this.count != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(3, this.count);
      }
      if (!this.modification.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(4, this.modification);
      }
      return size;
    }

    @Override
    public Diff mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.index = input.readInt64();
            break;
          }
          case 16: {
            this.isInsertion = input.readBool();
            break;
          }
          case 24: {
            this.count = input.readInt64();
            break;
          }
          case 34: {
            this.modification = input.readString();
            break;
          }
        }
      }
    }

    public static Diff parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Diff(), data);
    }

    public static Diff parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Diff().mergeFrom(input);
    }
  }
}
