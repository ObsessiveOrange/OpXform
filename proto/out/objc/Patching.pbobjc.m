// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patching.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Patching.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PatchingRoot

@implementation PatchingRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PatchingRoot_FileDescriptor

static GPBFileDescriptor *PatchingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.obsessiveorange.opxform"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Patch

@implementation Patch

@dynamic baseVersion;
@dynamic baseDocLength;
@dynamic diffsArray, diffsArray_Count;

typedef struct Patch__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *diffsArray;
  int64_t baseVersion;
  int64_t baseDocLength;
} Patch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseVersion",
        .dataTypeSpecific.className = NULL,
        .number = Patch_FieldNumber_BaseVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Patch__storage_, baseVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "baseDocLength",
        .dataTypeSpecific.className = NULL,
        .number = Patch_FieldNumber_BaseDocLength,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Patch__storage_, baseDocLength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "diffsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Diff),
        .number = Patch_FieldNumber_DiffsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Patch__storage_, diffsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Patch class]
                                     rootClass:[PatchingRoot class]
                                          file:PatchingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Patch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Diff

@implementation Diff

@dynamic index;
@dynamic isInsertion;
@dynamic count;
@dynamic modification;

typedef struct Diff__storage_ {
  uint32_t _has_storage_[1];
  NSString *modification;
  int64_t index;
  int64_t count;
} Diff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = Diff_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Diff__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isInsertion",
        .dataTypeSpecific.className = NULL,
        .number = Diff_FieldNumber_IsInsertion,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = Diff_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Diff__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "modification",
        .dataTypeSpecific.className = NULL,
        .number = Diff_FieldNumber_Modification,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Diff__storage_, modification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Diff class]
                                     rootClass:[PatchingRoot class]
                                          file:PatchingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Diff__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
